//
// Generated by CocoaPods-Keys
// on 25/03/2017
// For more information see https://github.com/orta/cocoapods-keys
//

#import <objc/runtime.h>
#import <Foundation/NSDictionary.h>
#import "PatchrKeys.h"

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wincomplete-implementation"

@implementation PatchrKeys

#pragma clang diagnostic pop

+ (BOOL)resolveInstanceMethod:(SEL)name
{
  NSString *key = NSStringFromSelector(name);
  NSString * (*implementation)(PatchrKeys *, SEL) = NULL;

  if ([key isEqualToString:@"bugsnagKey"]) {
    implementation = _podKeyscb1d83799398973f8aaf13fe74946723;
  }

  if ([key isEqualToString:@"bingSubscriptionKey"]) {
    implementation = _podKeyse6604380e1147a3126316b573070ec4e;
  }

  if ([key isEqualToString:@"creativeSdkClientId"]) {
    implementation = _podKeysb2b3a4eeef502a37c4374d2cdc4b9f4f;
  }

  if ([key isEqualToString:@"creativeSdkClientSecret"]) {
    implementation = _podKeysad40c1de013e6d4091f36a72b8bd6d59;
  }

  if ([key isEqualToString:@"awsS3Key"]) {
    implementation = _podKeyse34fa92f188be998ae3b930eacc919f8;
  }

  if ([key isEqualToString:@"awsS3Secret"]) {
    implementation = _podKeys28e3120dfd5d3940bfdd3918b00dc7c8;
  }

  if ([key isEqualToString:@"branchKey"]) {
    implementation = _podKeysa0b8dbdc39d299a103febb05c63e662e;
  }

  if ([key isEqualToString:@"proxibaseSecret"]) {
    implementation = _podKeys977a4e3d43d506c4c8f28dbcfc106730;
  }

  if ([key isEqualToString:@"facebookToken"]) {
    implementation = _podKeyse9c848d2566111a2e8ab97a467a8f412;
  }

  if (!implementation) {
    return [super resolveInstanceMethod:name];
  }

  return class_addMethod([self class], name, (IMP)implementation, "@@:");
}

static NSString *_podKeyscb1d83799398973f8aaf13fe74946723(PatchrKeys *self, SEL _cmd)
{
  
    
      char cString[33] = { PatchrKeysData[1845], PatchrKeysData[922], PatchrKeysData[6242], PatchrKeysData[1153], PatchrKeysData[6676], PatchrKeysData[1800], PatchrKeysData[4612], PatchrKeysData[7364], PatchrKeysData[223], PatchrKeysData[5636], PatchrKeysData[2157], PatchrKeysData[6303], PatchrKeysData[4699], PatchrKeysData[5050], PatchrKeysData[6825], PatchrKeysData[980], PatchrKeysData[3603], PatchrKeysData[3392], PatchrKeysData[906], PatchrKeysData[3229], PatchrKeysData[6550], PatchrKeysData[2972], PatchrKeysData[5734], PatchrKeysData[4627], PatchrKeysData[5116], PatchrKeysData[527], PatchrKeysData[114], PatchrKeysData[4090], PatchrKeysData[1710], PatchrKeysData[7996], PatchrKeysData[3027], PatchrKeysData[2957], '\0' };
    
    return [NSString stringWithCString:cString encoding:NSUTF8StringEncoding];
  
}

static NSString *_podKeyse6604380e1147a3126316b573070ec4e(PatchrKeys *self, SEL _cmd)
{
  
    
      char cString[33] = { PatchrKeysData[5387], PatchrKeysData[2624], PatchrKeysData[2244], PatchrKeysData[4608], PatchrKeysData[6474], PatchrKeysData[7227], PatchrKeysData[6832], PatchrKeysData[1048], PatchrKeysData[3965], PatchrKeysData[2899], PatchrKeysData[2850], PatchrKeysData[7877], PatchrKeysData[669], PatchrKeysData[3290], PatchrKeysData[5219], PatchrKeysData[2760], PatchrKeysData[5515], PatchrKeysData[6252], PatchrKeysData[46], PatchrKeysData[3371], PatchrKeysData[1753], PatchrKeysData[7984], PatchrKeysData[2057], PatchrKeysData[3475], PatchrKeysData[797], PatchrKeysData[5241], PatchrKeysData[5097], PatchrKeysData[66], PatchrKeysData[6505], PatchrKeysData[4005], PatchrKeysData[6705], PatchrKeysData[2285], '\0' };
    
    return [NSString stringWithCString:cString encoding:NSUTF8StringEncoding];
  
}

static NSString *_podKeysb2b3a4eeef502a37c4374d2cdc4b9f4f(PatchrKeys *self, SEL _cmd)
{
  
    
      char cString[33] = { PatchrKeysData[5527], PatchrKeysData[4704], PatchrKeysData[1720], PatchrKeysData[2074], PatchrKeysData[7130], PatchrKeysData[6931], PatchrKeysData[940], PatchrKeysData[7870], PatchrKeysData[112], PatchrKeysData[3151], PatchrKeysData[3073], PatchrKeysData[3277], PatchrKeysData[2704], PatchrKeysData[6180], PatchrKeysData[7114], PatchrKeysData[8004], PatchrKeysData[3831], PatchrKeysData[1068], PatchrKeysData[2413], PatchrKeysData[2528], PatchrKeysData[3305], PatchrKeysData[1411], PatchrKeysData[4187], PatchrKeysData[6933], PatchrKeysData[3562], PatchrKeysData[3331], PatchrKeysData[3532], PatchrKeysData[5565], PatchrKeysData[493], PatchrKeysData[4815], PatchrKeysData[4290], PatchrKeysData[3280], '\0' };
    
    return [NSString stringWithCString:cString encoding:NSUTF8StringEncoding];
  
}

static NSString *_podKeysad40c1de013e6d4091f36a72b8bd6d59(PatchrKeys *self, SEL _cmd)
{
  
    
      char cString[37] = { PatchrKeysData[3530], PatchrKeysData[577], PatchrKeysData[2644], PatchrKeysData[5284], PatchrKeysData[795], PatchrKeysData[4705], PatchrKeysData[6162], PatchrKeysData[3494], PatchrKeysData[6772], PatchrKeysData[5732], PatchrKeysData[7012], PatchrKeysData[4978], PatchrKeysData[4198], PatchrKeysData[6807], PatchrKeysData[2642], PatchrKeysData[334], PatchrKeysData[1456], PatchrKeysData[4701], PatchrKeysData[6140], PatchrKeysData[5166], PatchrKeysData[4432], PatchrKeysData[5152], PatchrKeysData[2022], PatchrKeysData[1839], PatchrKeysData[5390], PatchrKeysData[2520], PatchrKeysData[4405], PatchrKeysData[4280], PatchrKeysData[3426], PatchrKeysData[6304], PatchrKeysData[3235], PatchrKeysData[4823], PatchrKeysData[3346], PatchrKeysData[3894], PatchrKeysData[5006], PatchrKeysData[2808], '\0' };
    
    return [NSString stringWithCString:cString encoding:NSUTF8StringEncoding];
  
}

static NSString *_podKeyse34fa92f188be998ae3b930eacc919f8(PatchrKeys *self, SEL _cmd)
{
  
    
      char cString[21] = { PatchrKeysData[7438], PatchrKeysData[2375], PatchrKeysData[1293], PatchrKeysData[6045], PatchrKeysData[2045], PatchrKeysData[7634], PatchrKeysData[2996], PatchrKeysData[5139], PatchrKeysData[7817], PatchrKeysData[2675], PatchrKeysData[4942], PatchrKeysData[2368], PatchrKeysData[630], PatchrKeysData[2319], PatchrKeysData[6588], PatchrKeysData[388], PatchrKeysData[1145], PatchrKeysData[7950], PatchrKeysData[4266], PatchrKeysData[1120], '\0' };
    
    return [NSString stringWithCString:cString encoding:NSUTF8StringEncoding];
  
}

static NSString *_podKeys28e3120dfd5d3940bfdd3918b00dc7c8(PatchrKeys *self, SEL _cmd)
{
  
    
      char cString[41] = { PatchrKeysData[6530], PatchrKeysData[5357], PatchrKeysData[2878], PatchrKeysData[4480], PatchrKeysData[2055], PatchrKeysData[170], PatchrKeysData[2629], PatchrKeysData[3407], PatchrKeysData[1134], PatchrKeysData[5813], PatchrKeysData[5743], PatchrKeysData[6519], PatchrKeysData[3518], PatchrKeysData[1883], PatchrKeysData[1462], PatchrKeysData[4554], PatchrKeysData[4139], PatchrKeysData[4848], PatchrKeysData[4911], PatchrKeysData[7221], PatchrKeysData[5024], PatchrKeysData[827], PatchrKeysData[7892], PatchrKeysData[1557], PatchrKeysData[4067], PatchrKeysData[5489], PatchrKeysData[1059], PatchrKeysData[3674], PatchrKeysData[5094], PatchrKeysData[5947], PatchrKeysData[4426], PatchrKeysData[1808], PatchrKeysData[3982], PatchrKeysData[2371], PatchrKeysData[2348], PatchrKeysData[5021], PatchrKeysData[2716], PatchrKeysData[280], PatchrKeysData[6531], PatchrKeysData[1700], '\0' };
    
    return [NSString stringWithCString:cString encoding:NSUTF8StringEncoding];
  
}

static NSString *_podKeysa0b8dbdc39d299a103febb05c63e662e(PatchrKeys *self, SEL _cmd)
{
  
    
      char cString[42] = { PatchrKeysData[2301], PatchrKeysData[1453], PatchrKeysData[6525], PatchrKeysData[6482], PatchrKeysData[4878], PatchrKeysData[7140], PatchrKeysData[6715], PatchrKeysData[6357], PatchrKeysData[8043], PatchrKeysData[3744], PatchrKeysData[4267], PatchrKeysData[7769], PatchrKeysData[2106], PatchrKeysData[1133], PatchrKeysData[4792], PatchrKeysData[3333], PatchrKeysData[5437], PatchrKeysData[2825], PatchrKeysData[7531], PatchrKeysData[7830], PatchrKeysData[5618], PatchrKeysData[910], PatchrKeysData[7600], PatchrKeysData[3752], PatchrKeysData[5641], PatchrKeysData[3102], PatchrKeysData[4500], PatchrKeysData[860], PatchrKeysData[1425], PatchrKeysData[3901], PatchrKeysData[1938], PatchrKeysData[492], PatchrKeysData[180], PatchrKeysData[5035], PatchrKeysData[2663], PatchrKeysData[5915], PatchrKeysData[5890], PatchrKeysData[4817], PatchrKeysData[4621], PatchrKeysData[916], PatchrKeysData[5086], '\0' };
    
    return [NSString stringWithCString:cString encoding:NSUTF8StringEncoding];
  
}

static NSString *_podKeys977a4e3d43d506c4c8f28dbcfc106730(PatchrKeys *self, SEL _cmd)
{
  
    
      char cString[8] = { PatchrKeysData[7670], PatchrKeysData[2158], PatchrKeysData[2811], PatchrKeysData[4089], PatchrKeysData[867], PatchrKeysData[7074], PatchrKeysData[3694], '\0' };
    
    return [NSString stringWithCString:cString encoding:NSUTF8StringEncoding];
  
}

static NSString *_podKeyse9c848d2566111a2e8ab97a467a8f412(PatchrKeys *self, SEL _cmd)
{
  
    
      char cString[49] = { PatchrKeysData[3632], PatchrKeysData[4337], PatchrKeysData[7201], PatchrKeysData[1577], PatchrKeysData[5453], PatchrKeysData[5044], PatchrKeysData[1580], PatchrKeysData[5954], PatchrKeysData[6151], PatchrKeysData[7500], PatchrKeysData[2131], PatchrKeysData[284], PatchrKeysData[6784], PatchrKeysData[6216], PatchrKeysData[6842], PatchrKeysData[1593], PatchrKeysData[8052], PatchrKeysData[4736], PatchrKeysData[7716], PatchrKeysData[738], PatchrKeysData[2722], PatchrKeysData[6727], PatchrKeysData[3223], PatchrKeysData[2607], PatchrKeysData[3191], PatchrKeysData[592], PatchrKeysData[3847], PatchrKeysData[5991], PatchrKeysData[7640], PatchrKeysData[4042], PatchrKeysData[302], PatchrKeysData[76], PatchrKeysData[2175], PatchrKeysData[1188], PatchrKeysData[2099], PatchrKeysData[2826], PatchrKeysData[351], PatchrKeysData[1988], PatchrKeysData[2758], PatchrKeysData[2554], PatchrKeysData[4975], PatchrKeysData[4794], PatchrKeysData[384], PatchrKeysData[1952], PatchrKeysData[2749], PatchrKeysData[34], PatchrKeysData[1882], PatchrKeysData[4920], '\0' };
    
    return [NSString stringWithCString:cString encoding:NSUTF8StringEncoding];
  
}


static char PatchrKeysData[8066] = "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_/Ikg+/zHU6xCt2II6W2G3r4YNzI/XlU640eoPBFU0iyEJ6G+PihRjUaUsvJqI3Oxpvt40MYagR7jnkFjfAYq+nwXZtq9V934mnCWRizOTOK06u93ZTK5UdIyMHUTtRTX97bhuautFItZYsTLYIVlNd1k1b8w4AWBS7HzC2JwDl1cdE3F1ClxNiVpcRQNegvTa3aKJanySBurkmL7SPBYt1oK2Mxci3cQg6m1uyrWvm+Db1cm0LoHeMqDh/NWGjO8VDdSXrtJU7bVS49VIv0x1glq7Q1sI4oHC-3kP2wYgKp2Z6uLRvnI9zwcf96uY7SqZbNz-RNrn5oBC4PoVH50+j9KxxyHL1P/36jiLLS06l0mik4F33Vv0RM82otzjuJNkmOLaBMgV47+KS+obDQg8cYF1dhUpUWHvCuMyyEfcHELfjCzi2Bpog2nbEMqzwhD376d/eKvlj2fgTtElxhnkKD+6wAWWAFam06Ldqhjr49K7yk+E+uHsxVOAgaGmAdH4YbLBwx0EAqvcCEH318vA/u5Aj4SzPIJsF56IM66mBk/XRxHAsmedXs5s9x+dtRZv5899hqt53xb5TvssFPvHO3wSpIrz40x9pzkBtxb6GGSwlY8N1mvO8N4jxq30AOw6C5wEtz6q7K/mcpD3ir1jvJL8rtQSxCmDlv80K9wLC9zIi4d3LDyze3ij98gHjlHhn3i4EGTgdsEuf4xfnOPWokes+q4Az3EgoWrOdbrcwdllw8XXGTIXI6RG2nV2FN7Ioho/L71uKUkz2qb63KVlIecsSNeOjcxyZrK3tK3UYA8j4G+p4IJg9Vj9JBGhYFfRnWR5Zq55r62p1jNvtVV0beHZtbJWzho3Ga8aisNmaCyS7C5udAQ28LdvSK4gMMkKsusYBuT7wFS8oSRNc6/u6vOJ4QEdNtnH06q2cF2lBP2HvjoOWr1Ts7ch+TAgl3+4Md6yyO19WtTreZ8kh+r2SM7aFaqq/4I2jg93h+/hoQGzGK3Q46XmAcER2XJI1/jgVO4fATn+HadUYVlffJbMZKs6mENaS0VYCIcGMhivo+K6w/b1diKENTusLrRZEgb97O5/RGhb2SojPn2ZVavmtroozQiU9fnhAHJvutfwHw17EZ4c3uJrnpW5IjQ90zY+w0IH6C55aliFFl58VTrgGpC87Y25uh/WmLlTosTQSsqZX1qq53gvGe/LXyWABxcj9UEsAfqH0PcTbeX355v1XiR6tOvb+wzJ/eA95IJlJZEr8vpAMV1RlSpCUZu1TwTGvghuHbZ2rMWRMSCDqCiIacgF3kXbAq7ZRaOplJ6JaFOC+vXHgzM0UFPozkDAQwVl7/pvMUG8uCqXnwTUxNe2fIlIq3Nf92dNaNGj5wJXm5831IIkT9d2DO1lF5PQkUg3EgjfKQtROLQjUM9C4/UFlv+MqPvE86S+IDJhHcCPT6j4JlELwEx/zwvUVl3fXM5UQ/1SbA6BJZOc0kHI/FXDrexcIFT14eKzEXGEEvaRcKZviuKl1rQU6ubC8vrT61UtniO588SOvxlS5qYSExbEXc0_5wT68nzc8vWPIjBNMm/K\\\"";

- (NSString *)description
{
  return [@{
            @"bugsnagKey": self.bugsnagKey,
            @"bingSubscriptionKey": self.bingSubscriptionKey,
            @"creativeSdkClientId": self.creativeSdkClientId,
            @"creativeSdkClientSecret": self.creativeSdkClientSecret,
            @"awsS3Key": self.awsS3Key,
            @"awsS3Secret": self.awsS3Secret,
            @"branchKey": self.branchKey,
            @"proxibaseSecret": self.proxibaseSecret,
            @"facebookToken": self.facebookToken,
  } description];
}

- (id)debugQuickLookObject
{
  return [self description];
}

@end
