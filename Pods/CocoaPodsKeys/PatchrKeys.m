//
// Generated by CocoaPods-Keys
// on 22/03/2017
// For more information see https://github.com/orta/cocoapods-keys
//

#import <objc/runtime.h>
#import <Foundation/NSDictionary.h>
#import "PatchrKeys.h"

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wincomplete-implementation"

@implementation PatchrKeys

#pragma clang diagnostic pop

+ (BOOL)resolveInstanceMethod:(SEL)name
{
  NSString *key = NSStringFromSelector(name);
  NSString * (*implementation)(PatchrKeys *, SEL) = NULL;

  if ([key isEqualToString:@"bugsnagKey"]) {
    implementation = _podKeyscb1d83799398973f8aaf13fe74946723;
  }

  if ([key isEqualToString:@"bingSubscriptionKey"]) {
    implementation = _podKeyse6604380e1147a3126316b573070ec4e;
  }

  if ([key isEqualToString:@"creativeSdkClientId"]) {
    implementation = _podKeysb2b3a4eeef502a37c4374d2cdc4b9f4f;
  }

  if ([key isEqualToString:@"creativeSdkClientSecret"]) {
    implementation = _podKeysad40c1de013e6d4091f36a72b8bd6d59;
  }

  if ([key isEqualToString:@"awsS3Key"]) {
    implementation = _podKeyse34fa92f188be998ae3b930eacc919f8;
  }

  if ([key isEqualToString:@"awsS3Secret"]) {
    implementation = _podKeys28e3120dfd5d3940bfdd3918b00dc7c8;
  }

  if ([key isEqualToString:@"branchKey"]) {
    implementation = _podKeysa0b8dbdc39d299a103febb05c63e662e;
  }

  if ([key isEqualToString:@"proxibaseSecret"]) {
    implementation = _podKeys977a4e3d43d506c4c8f28dbcfc106730;
  }

  if ([key isEqualToString:@"facebookToken"]) {
    implementation = _podKeyse9c848d2566111a2e8ab97a467a8f412;
  }

  if (!implementation) {
    return [super resolveInstanceMethod:name];
  }

  return class_addMethod([self class], name, (IMP)implementation, "@@:");
}

static NSString *_podKeyscb1d83799398973f8aaf13fe74946723(PatchrKeys *self, SEL _cmd)
{
  
    
      char cString[33] = { PatchrKeysData[6716], PatchrKeysData[7676], PatchrKeysData[1976], PatchrKeysData[5169], PatchrKeysData[5587], PatchrKeysData[220], PatchrKeysData[4745], PatchrKeysData[1092], PatchrKeysData[7028], PatchrKeysData[7341], PatchrKeysData[1445], PatchrKeysData[2735], PatchrKeysData[7642], PatchrKeysData[3111], PatchrKeysData[900], PatchrKeysData[2947], PatchrKeysData[2663], PatchrKeysData[5950], PatchrKeysData[4569], PatchrKeysData[1951], PatchrKeysData[5098], PatchrKeysData[4634], PatchrKeysData[5124], PatchrKeysData[2334], PatchrKeysData[1337], PatchrKeysData[7786], PatchrKeysData[6712], PatchrKeysData[4014], PatchrKeysData[1963], PatchrKeysData[7051], PatchrKeysData[3240], PatchrKeysData[4579], '\0' };
    
    return [NSString stringWithCString:cString encoding:NSUTF8StringEncoding];
  
}

static NSString *_podKeyse6604380e1147a3126316b573070ec4e(PatchrKeys *self, SEL _cmd)
{
  
    
      char cString[33] = { PatchrKeysData[5070], PatchrKeysData[3794], PatchrKeysData[4571], PatchrKeysData[1668], PatchrKeysData[5577], PatchrKeysData[6585], PatchrKeysData[2942], PatchrKeysData[7974], PatchrKeysData[3323], PatchrKeysData[1243], PatchrKeysData[2976], PatchrKeysData[4590], PatchrKeysData[6607], PatchrKeysData[7248], PatchrKeysData[4848], PatchrKeysData[1121], PatchrKeysData[6897], PatchrKeysData[5014], PatchrKeysData[2502], PatchrKeysData[6885], PatchrKeysData[5384], PatchrKeysData[7961], PatchrKeysData[2141], PatchrKeysData[1900], PatchrKeysData[5997], PatchrKeysData[8052], PatchrKeysData[2777], PatchrKeysData[1455], PatchrKeysData[6083], PatchrKeysData[6236], PatchrKeysData[135], PatchrKeysData[7062], '\0' };
    
    return [NSString stringWithCString:cString encoding:NSUTF8StringEncoding];
  
}

static NSString *_podKeysb2b3a4eeef502a37c4374d2cdc4b9f4f(PatchrKeys *self, SEL _cmd)
{
  
    
      char cString[33] = { PatchrKeysData[1904], PatchrKeysData[4690], PatchrKeysData[6873], PatchrKeysData[1496], PatchrKeysData[7791], PatchrKeysData[7587], PatchrKeysData[6722], PatchrKeysData[601], PatchrKeysData[722], PatchrKeysData[302], PatchrKeysData[7324], PatchrKeysData[2276], PatchrKeysData[4955], PatchrKeysData[3196], PatchrKeysData[4986], PatchrKeysData[6524], PatchrKeysData[5459], PatchrKeysData[6332], PatchrKeysData[1655], PatchrKeysData[2423], PatchrKeysData[3050], PatchrKeysData[3791], PatchrKeysData[2870], PatchrKeysData[484], PatchrKeysData[1872], PatchrKeysData[1538], PatchrKeysData[287], PatchrKeysData[2517], PatchrKeysData[5222], PatchrKeysData[7476], PatchrKeysData[6691], PatchrKeysData[3306], '\0' };
    
    return [NSString stringWithCString:cString encoding:NSUTF8StringEncoding];
  
}

static NSString *_podKeysad40c1de013e6d4091f36a72b8bd6d59(PatchrKeys *self, SEL _cmd)
{
  
    
      char cString[37] = { PatchrKeysData[4012], PatchrKeysData[1339], PatchrKeysData[6133], PatchrKeysData[652], PatchrKeysData[3157], PatchrKeysData[6639], PatchrKeysData[4658], PatchrKeysData[3979], PatchrKeysData[961], PatchrKeysData[4345], PatchrKeysData[5440], PatchrKeysData[736], PatchrKeysData[8060], PatchrKeysData[4353], PatchrKeysData[2071], PatchrKeysData[5479], PatchrKeysData[4487], PatchrKeysData[3726], PatchrKeysData[8002], PatchrKeysData[5846], PatchrKeysData[182], PatchrKeysData[148], PatchrKeysData[1396], PatchrKeysData[6501], PatchrKeysData[668], PatchrKeysData[179], PatchrKeysData[1965], PatchrKeysData[6158], PatchrKeysData[2670], PatchrKeysData[6534], PatchrKeysData[7861], PatchrKeysData[5783], PatchrKeysData[631], PatchrKeysData[438], PatchrKeysData[2312], PatchrKeysData[1852], '\0' };
    
    return [NSString stringWithCString:cString encoding:NSUTF8StringEncoding];
  
}

static NSString *_podKeyse34fa92f188be998ae3b930eacc919f8(PatchrKeys *self, SEL _cmd)
{
  
    
      char cString[21] = { PatchrKeysData[4949], PatchrKeysData[1313], PatchrKeysData[2786], PatchrKeysData[815], PatchrKeysData[5480], PatchrKeysData[2012], PatchrKeysData[1817], PatchrKeysData[3830], PatchrKeysData[6487], PatchrKeysData[7351], PatchrKeysData[3773], PatchrKeysData[2441], PatchrKeysData[1979], PatchrKeysData[7185], PatchrKeysData[6855], PatchrKeysData[699], PatchrKeysData[5610], PatchrKeysData[941], PatchrKeysData[5918], PatchrKeysData[4750], '\0' };
    
    return [NSString stringWithCString:cString encoding:NSUTF8StringEncoding];
  
}

static NSString *_podKeys28e3120dfd5d3940bfdd3918b00dc7c8(PatchrKeys *self, SEL _cmd)
{
  
    
      char cString[41] = { PatchrKeysData[6759], PatchrKeysData[2604], PatchrKeysData[353], PatchrKeysData[2339], PatchrKeysData[1347], PatchrKeysData[2963], PatchrKeysData[5188], PatchrKeysData[2749], PatchrKeysData[1564], PatchrKeysData[7360], PatchrKeysData[4438], PatchrKeysData[4270], PatchrKeysData[4740], PatchrKeysData[3916], PatchrKeysData[7682], PatchrKeysData[3203], PatchrKeysData[6631], PatchrKeysData[3842], PatchrKeysData[479], PatchrKeysData[114], PatchrKeysData[6353], PatchrKeysData[3317], PatchrKeysData[2084], PatchrKeysData[2133], PatchrKeysData[4688], PatchrKeysData[540], PatchrKeysData[6003], PatchrKeysData[2874], PatchrKeysData[6770], PatchrKeysData[6437], PatchrKeysData[2593], PatchrKeysData[2075], PatchrKeysData[2218], PatchrKeysData[5108], PatchrKeysData[6281], PatchrKeysData[1503], PatchrKeysData[6065], PatchrKeysData[1415], PatchrKeysData[5197], PatchrKeysData[4761], '\0' };
    
    return [NSString stringWithCString:cString encoding:NSUTF8StringEncoding];
  
}

static NSString *_podKeysa0b8dbdc39d299a103febb05c63e662e(PatchrKeys *self, SEL _cmd)
{
  
    
      char cString[42] = { PatchrKeysData[1135], PatchrKeysData[5658], PatchrKeysData[4673], PatchrKeysData[4201], PatchrKeysData[671], PatchrKeysData[6024], PatchrKeysData[4542], PatchrKeysData[2616], PatchrKeysData[4443], PatchrKeysData[3677], PatchrKeysData[5962], PatchrKeysData[2946], PatchrKeysData[7765], PatchrKeysData[3745], PatchrKeysData[968], PatchrKeysData[5605], PatchrKeysData[6119], PatchrKeysData[4573], PatchrKeysData[4910], PatchrKeysData[3109], PatchrKeysData[1594], PatchrKeysData[163], PatchrKeysData[3698], PatchrKeysData[4945], PatchrKeysData[2076], PatchrKeysData[1153], PatchrKeysData[1155], PatchrKeysData[3836], PatchrKeysData[6632], PatchrKeysData[6149], PatchrKeysData[2624], PatchrKeysData[3282], PatchrKeysData[1654], PatchrKeysData[5985], PatchrKeysData[6331], PatchrKeysData[3923], PatchrKeysData[6078], PatchrKeysData[2583], PatchrKeysData[2007], PatchrKeysData[5863], PatchrKeysData[549], '\0' };
    
    return [NSString stringWithCString:cString encoding:NSUTF8StringEncoding];
  
}

static NSString *_podKeys977a4e3d43d506c4c8f28dbcfc106730(PatchrKeys *self, SEL _cmd)
{
  
    
      char cString[8] = { PatchrKeysData[6613], PatchrKeysData[3247], PatchrKeysData[1468], PatchrKeysData[6186], PatchrKeysData[1343], PatchrKeysData[2427], PatchrKeysData[1936], '\0' };
    
    return [NSString stringWithCString:cString encoding:NSUTF8StringEncoding];
  
}

static NSString *_podKeyse9c848d2566111a2e8ab97a467a8f412(PatchrKeys *self, SEL _cmd)
{
  
    
      char cString[49] = { PatchrKeysData[2449], PatchrKeysData[1792], PatchrKeysData[4277], PatchrKeysData[4953], PatchrKeysData[5914], PatchrKeysData[4768], PatchrKeysData[4076], PatchrKeysData[6448], PatchrKeysData[419], PatchrKeysData[4451], PatchrKeysData[4145], PatchrKeysData[5134], PatchrKeysData[2640], PatchrKeysData[5716], PatchrKeysData[4890], PatchrKeysData[405], PatchrKeysData[6833], PatchrKeysData[4838], PatchrKeysData[6346], PatchrKeysData[6081], PatchrKeysData[1300], PatchrKeysData[8030], PatchrKeysData[6919], PatchrKeysData[2166], PatchrKeysData[5541], PatchrKeysData[619], PatchrKeysData[3539], PatchrKeysData[4501], PatchrKeysData[7577], PatchrKeysData[1015], PatchrKeysData[3304], PatchrKeysData[5804], PatchrKeysData[1494], PatchrKeysData[3069], PatchrKeysData[7964], PatchrKeysData[5777], PatchrKeysData[1721], PatchrKeysData[6909], PatchrKeysData[6345], PatchrKeysData[5575], PatchrKeysData[4338], PatchrKeysData[3241], PatchrKeysData[4699], PatchrKeysData[39], PatchrKeysData[3359], PatchrKeysData[5704], PatchrKeysData[213], PatchrKeysData[7193], '\0' };
    
    return [NSString stringWithCString:cString encoding:NSUTF8StringEncoding];
  
}


static char PatchrKeysData[8066] = "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_zwRgszawBMQrF/0MP/VV51Jr8yBMw10Az9LoHPXUSIV73y3MiYi6XNcVQE28CN0QSvHAPzl2chg4qLx1mld6QVmTsjKJraF1i6RcgQ5zCuHIj+mP6GbXiAOpEk7ZdPfL53KjWEdybSQ068K9dTydQOV-E39x2vhtB1TmRYMpDuqHzVRzJQnHlNlmyZjATm4vThHaLY6Du6ZR5U1xlSvIQXpcf/4nJAd90toY5FC/x9KwyNcK7_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\\\"";

- (NSString *)description
{
  return [@{
            @"bugsnagKey": self.bugsnagKey,
            @"bingSubscriptionKey": self.bingSubscriptionKey,
            @"creativeSdkClientId": self.creativeSdkClientId,
            @"creativeSdkClientSecret": self.creativeSdkClientSecret,
            @"awsS3Key": self.awsS3Key,
            @"awsS3Secret": self.awsS3Secret,
            @"branchKey": self.branchKey,
            @"proxibaseSecret": self.proxibaseSecret,
            @"facebookToken": self.facebookToken,
  } description];
}

- (id)debugQuickLookObject
{
  return [self description];
}

@end
